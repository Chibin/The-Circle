!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ATK	.\Entity.h	/^			int HP, ATK, DEF, SPD, MATK;$/;"	m	struct:Entity::status
BATTLE	.\GameManager.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	e	enum:GameManager::gameState
BATTLE	.\Scene.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	e	enum:Scene::gameState
BATTLE	.\SceneManager.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	e	enum:SceneManager::gameState
BATTLEMANAGER_H_	.\BattleManager.h	2;"	d
BATTLESCENE_H_	.\BattleScene.h	2;"	d
BattleManager	.\BattleManager.h	/^	BattleManager(Player* _player){$/;"	f	class:BattleManager
BattleManager	.\BattleManager.h	/^class BattleManager{$/;"	c
BattleScene	.\BattleScene.cpp	/^BattleScene::BattleScene(int* _gameOver,SDL_Surface* _screen){$/;"	f	class:BattleScene
BattleScene	.\BattleScene.h	/^class BattleScene : public Scene{$/;"	c
DEF	.\Entity.h	/^			int HP, ATK, DEF, SPD, MATK;$/;"	m	struct:Entity::status
ENTITY_H_	.\Entity.h	2;"	d
Entity	.\Entity.h	/^		Entity(){}$/;"	f	class:Entity
Entity	.\Entity.h	/^class Entity{$/;"	c
FIGHT	.\BattleManager.h	/^		enum battleSelect{FIGHT,ITEM,RUN, isFight,isItem,isRun};$/;"	e	enum:BattleManager::battleSelect
FIGHT	.\BattleScene.h	/^		enum battleSelect{FIGHT,ITEM,RUN, isFight,isItem,isRun};$/;"	e	enum:BattleScene::battleSelect
GAMEMANAGER_H_	.\GameManager.h	2;"	d
GameDisplay	.\GameManager.cpp	/^void GameManager::GameDisplay(){$/;"	f	class:GameManager
GameLoop	.\GameManager.cpp	/^void GameManager::GameLoop(){$/;"	f	class:GameManager
GameManager	.\GameManager.cpp	/^GameManager::GameManager(){$/;"	f	class:GameManager
GameManager	.\GameManager.h	/^class GameManager{$/;"	c
HP	.\Entity.h	/^			int HP, ATK, DEF, SPD, MATK;$/;"	m	struct:Entity::status
ITEM	.\BattleManager.h	/^		enum battleSelect{FIGHT,ITEM,RUN, isFight,isItem,isRun};$/;"	e	enum:BattleManager::battleSelect
ITEM	.\BattleScene.h	/^		enum battleSelect{FIGHT,ITEM,RUN, isFight,isItem,isRun};$/;"	e	enum:BattleScene::battleSelect
MATK	.\Entity.h	/^			int HP, ATK, DEF, SPD, MATK;$/;"	m	struct:Entity::status
MENU	.\GameManager.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	e	enum:GameManager::gameState
MENU	.\Scene.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	e	enum:Scene::gameState
MENU	.\SceneManager.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	e	enum:SceneManager::gameState
Mob	.\Entity.h	/^		Mob(){$/;"	f	class:Mob
Mob	.\Entity.h	/^class Mob : public Entity{$/;"	c
NORMAL	.\GameManager.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	e	enum:GameManager::gameState
NORMAL	.\Scene.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	e	enum:Scene::gameState
NORMAL	.\SceneManager.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	e	enum:SceneManager::gameState
NORMALSCENE_H_	.\NormalScene.h	2;"	d
Name	.\Entity.h	/^		string Name;$/;"	m	class:Entity
NormalScene	.\NormalScene.cpp	/^NormalScene::NormalScene(int* _gameOver, SDL_Surface* _screen){$/;"	f	class:NormalScene
NormalScene	.\NormalScene.h	/^class NormalScene : public Scene{$/;"	c
OPENINGMENU	.\GameManager.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	e	enum:GameManager::gameState
OPENINGMENU	.\Scene.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	e	enum:Scene::gameState
OPENINGMENU	.\SceneManager.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	e	enum:SceneManager::gameState
OPENINGSCENE_H_	.\OpeningScene.h	2;"	d
OpeningScene	.\OpeningScene.cpp	/^OpeningScene::OpeningScene(int* _gameOver,SDL_Surface* screen){$/;"	f	class:OpeningScene
OpeningScene	.\OpeningScene.h	/^class OpeningScene: public Scene{$/;"	c
Player	.\Entity.h	/^		Player(){$/;"	f	class:Player
Player	.\Entity.h	/^class Player: public Entity{$/;"	c
RUN	.\BattleManager.h	/^		enum battleSelect{FIGHT,ITEM,RUN, isFight,isItem,isRun};$/;"	e	enum:BattleManager::battleSelect
RUN	.\BattleScene.h	/^		enum battleSelect{FIGHT,ITEM,RUN, isFight,isItem,isRun};$/;"	e	enum:BattleScene::battleSelect
SCENEMANAGER_H_	.\SceneManager.h	2;"	d
SCENE_H_	.\Scene.h	2;"	d
SPD	.\Entity.h	/^			int HP, ATK, DEF, SPD, MATK;$/;"	m	struct:Entity::status
Scene	.\Scene.h	/^		Scene(){}$/;"	f	class:Scene
Scene	.\Scene.h	/^class Scene{$/;"	c
SceneManager	.\SceneManager.cpp	/^SceneManager::SceneManager(SDL_Surface* _screen,int* _gameOver){$/;"	f	class:SceneManager
SceneManager	.\SceneManager.h	/^class SceneManager{$/;"	c
bManager	.\BattleScene.h	/^		BattleManager* bManager;$/;"	m	class:BattleScene
battle	.\SceneManager.h	/^		BattleScene* battle;$/;"	m	class:SceneManager
battleHandler	.\BattleManager.h	/^	void battleHandler(int& battleMenu,SDL_Surface* screen){$/;"	f	class:BattleManager
battleMenu	.\BattleScene.h	/^		int battleMenu;$/;"	m	class:BattleScene
battleSelect	.\BattleManager.h	/^		enum battleSelect{FIGHT,ITEM,RUN, isFight,isItem,isRun};$/;"	g	class:BattleManager
battleSelect	.\BattleScene.h	/^		enum battleSelect{FIGHT,ITEM,RUN, isFight,isItem,isRun};$/;"	g	class:BattleScene
battleUpdate	.\BattleManager.h	/^	void battleUpdate(int& battleMenu, SDL_Surface* screen){$/;"	f	class:BattleManager
compareEntity_SPD	.\BattleManager.h	/^static bool compareEntity_SPD(Entity* first, Entity* second){$/;"	f
compare_SPD	.\BattleManager.h	/^static bool compare_SPD(Mob* first, Mob* second){$/;"	f
display	.\BattleScene.cpp	/^void BattleScene::display(SDL_Surface* screen){$/;"	f	class:BattleScene
display	.\NormalScene.cpp	/^void NormalScene::display(SDL_Surface* screen){$/;"	f	class:NormalScene
display	.\OpeningScene.cpp	/^void OpeningScene::display(SDL_Surface* screen){$/;"	f	class:OpeningScene
enemyImage	.\Entity.h	/^		SDL_Surface* enemyText[2], enemyImage;$/;"	m	class:Mob
enemyLoc	.\Entity.h	/^		SDL_Rect enemyLoc;$/;"	m	class:Mob
enemyText	.\Entity.h	/^		SDL_Surface* enemyText[2], enemyImage;$/;"	m	class:Mob
eventHandler	.\BattleScene.cpp	/^void BattleScene::eventHandler(SDL_Event& event, int& gameState){$/;"	f	class:BattleScene
eventHandler	.\GameManager.cpp	/^void GameManager::eventHandler(SDL_Event& event){$/;"	f	class:GameManager
eventHandler	.\NormalScene.cpp	/^void NormalScene::eventHandler(SDL_Event& event, int& gameState){$/;"	f	class:NormalScene
eventHandler	.\OpeningScene.cpp	/^void OpeningScene::eventHandler(SDL_Event& event, int& gameState){$/;"	f	class:OpeningScene
eventHandler	.\SceneManager.cpp	/^void SceneManager::eventHandler(SDL_Event& event,int& gameState){$/;"	f	class:SceneManager
events	.\GameManager.h	/^		SDL_Event events;$/;"	m	class:GameManager
fightLoc	.\BattleScene.h	/^		SDL_Rect fightLoc, runLoc;$/;"	m	class:BattleScene
fightVal	.\BattleScene.h	/^		int fightVal, runVal;$/;"	m	class:BattleScene
font	.\BattleScene.h	/^		TTF_Font* font;$/;"	m	class:BattleScene
font	.\Entity.h	/^		TTF_Font* font;$/;"	m	class:Entity
gameOver	.\GameManager.h	/^		int gameOver;$/;"	m	class:GameManager
gameOver	.\Scene.h	/^		int* gameOver;$/;"	m	class:Scene
gameOver	.\SceneManager.h	/^		int* gameOver;$/;"	m	class:SceneManager
gameState	.\GameManager.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	g	class:GameManager
gameState	.\GameManager.h	/^	   	int gameState;$/;"	m	class:GameManager
gameState	.\Scene.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	g	class:Scene
gameState	.\SceneManager.h	/^		enum gameState{NORMAL,MENU,BATTLE,OPENINGMENU};$/;"	g	class:SceneManager
getATK	.\Entity.h	/^		int getATK(){return stats.ATK;}$/;"	f	class:Entity
getEnemyText	.\Entity.h	/^		SDL_Surface** getEnemyText(){$/;"	f	class:Mob
getHP	.\Entity.h	/^		int getHP(){return stats.HP;}$/;"	f	class:Entity
getName	.\Entity.h	/^		string getName(){return Name;}$/;"	f	class:Entity
getPlayerText	.\Entity.h	/^		SDL_Surface** getPlayerText(){$/;"	f	class:Player
getSPD	.\Entity.h	/^		int getSPD(){return stats.SPD;}$/;"	f	class:Entity
getStats	.\Entity.h	/^		status getStats(){return stats;}$/;"	f	class:Entity
isFight	.\BattleManager.h	/^		enum battleSelect{FIGHT,ITEM,RUN, isFight,isItem,isRun};$/;"	e	enum:BattleManager::battleSelect
isFight	.\BattleScene.h	/^		enum battleSelect{FIGHT,ITEM,RUN, isFight,isItem,isRun};$/;"	e	enum:BattleScene::battleSelect
isItem	.\BattleManager.h	/^		enum battleSelect{FIGHT,ITEM,RUN, isFight,isItem,isRun};$/;"	e	enum:BattleManager::battleSelect
isItem	.\BattleScene.h	/^		enum battleSelect{FIGHT,ITEM,RUN, isFight,isItem,isRun};$/;"	e	enum:BattleScene::battleSelect
isRun	.\BattleManager.h	/^		enum battleSelect{FIGHT,ITEM,RUN, isFight,isItem,isRun};$/;"	e	enum:BattleManager::battleSelect
isRun	.\BattleScene.h	/^		enum battleSelect{FIGHT,ITEM,RUN, isFight,isItem,isRun};$/;"	e	enum:BattleScene::battleSelect
items	.\BattleManager.h	/^	void items(){}$/;"	f	class:BattleManager
loadMobs	.\BattleManager.h	/^	void loadMobs(std::vector<Mob*>* _mobs){$/;"	f	class:BattleManager
loadMobs	.\BattleScene.cpp	/^void BattleScene::loadMobs(){$/;"	f	class:BattleScene
main	.\main.cpp	/^int main(int argc, char *argv[]){$/;"	f
mobSelected	.\BattleManager.h	/^		int mobSelected;$/;"	m	class:BattleManager
mobs	.\BattleManager.h	/^		std::vector<Mob*>* mobs;$/;"	m	class:BattleManager
monsterSelect	.\BattleManager.h	/^	void monsterSelect(SDL_Surface* screen,int& battleMenu){$/;"	f	class:BattleManager
moveLeft	.\BattleManager.h	/^	void moveLeft(){$/;"	f	class:BattleManager
moveRight	.\BattleManager.h	/^	void moveRight(){$/;"	f	class:BattleManager
normal	.\SceneManager.h	/^		NormalScene* normal;$/;"	m	class:SceneManager
opening	.\SceneManager.h	/^		OpeningScene* opening;$/;"	m	class:SceneManager
player	.\BattleManager.h	/^		Player* player;$/;"	m	class:BattleManager
player	.\BattleScene.h	/^		Player* player;$/;"	m	class:BattleScene
playerText	.\Entity.h	/^		SDL_Surface* playerText[2];$/;"	m	class:Player
quit	.\OpeningScene.h	/^		SDL_Surface *start[2], *quit[2];$/;"	m	class:OpeningScene
quitRect	.\OpeningScene.h	/^		SDL_Rect startRect, quitRect;$/;"	m	class:OpeningScene
quitValue	.\OpeningScene.h	/^		int startValue, quitValue;$/;"	m	class:OpeningScene
run	.\BattleManager.h	/^	void run(){$/;"	f	class:BattleManager
runLoc	.\BattleScene.h	/^		SDL_Rect fightLoc, runLoc;$/;"	m	class:BattleScene
runVal	.\BattleScene.h	/^		int fightVal, runVal;$/;"	m	class:BattleScene
sManager	.\GameManager.h	/^		SceneManager* sManager;$/;"	m	class:GameManager
sceneHandler	.\SceneManager.cpp	/^void SceneManager::sceneHandler(int gameState){$/;"	f	class:SceneManager
screen	.\BattleScene.h	/^		SDL_Surface* textFight[2],* textRun[2],* screen;$/;"	m	class:BattleScene
screen	.\GameManager.h	/^		SDL_Surface* screen;$/;"	m	class:GameManager
screen	.\Scene.h	/^		SDL_Surface* screen;$/;"	m	class:Scene
screen	.\SceneManager.h	/^		SDL_Surface* screen;$/;"	m	class:SceneManager
setATK	.\Entity.h	/^		void setATK(int _ATK){ stats.ATK = _ATK;}$/;"	f	class:Entity
setDEF	.\Entity.h	/^		void setDEF(int _DEF){ stats.DEF = _DEF;}$/;"	f	class:Entity
setHP	.\Entity.h	/^		void setHP(int _HP){ stats.HP = _HP;}$/;"	f	class:Entity
setMATK	.\Entity.h	/^		void setMATK(int _MATK){ stats.MATK = _MATK;}$/;"	f	class:Entity
setName	.\Entity.h	/^		virtual void setName(string _Name){Name = _Name;}$/;"	f	class:Entity
setName	.\Entity.h	/^		void setName(string _Name){$/;"	f	class:Mob
setSPD	.\Entity.h	/^		void setSPD(int _SPD){ stats.SPD = _SPD;}$/;"	f	class:Entity
setStats	.\Entity.h	/^		void setStats(int _HP, int _ATK, int _DEF, int _SPD, int _MATK){$/;"	f	class:Entity
start	.\OpeningScene.h	/^		SDL_Surface *start[2], *quit[2];$/;"	m	class:OpeningScene
startFight	.\BattleManager.h	/^	void startFight(){$/;"	f	class:BattleManager
startRect	.\OpeningScene.h	/^		SDL_Rect startRect, quitRect;$/;"	m	class:OpeningScene
startValue	.\OpeningScene.h	/^		int startValue, quitValue;$/;"	m	class:OpeningScene
stats	.\Entity.h	/^		status stats;$/;"	m	class:Entity
status	.\Entity.h	/^		struct status{$/;"	s	class:Entity
textFight	.\BattleScene.h	/^		SDL_Surface* textFight[2],* textRun[2],* screen;$/;"	m	class:BattleScene
textRun	.\BattleScene.h	/^		SDL_Surface* textFight[2],* textRun[2],* screen;$/;"	m	class:BattleScene
turnOrder	.\BattleManager.h	/^	void turnOrder(std::vector<Entity*>* inOrder){$/;"	f	class:BattleManager
updateFrequency	.\GameManager.h	/^		int updateFrequency;$/;"	m	class:GameManager
~BattleScene	.\BattleScene.cpp	/^BattleScene::~BattleScene(){$/;"	f	class:BattleScene
~Mob	.\Entity.h	/^		~Mob(){$/;"	f	class:Mob
